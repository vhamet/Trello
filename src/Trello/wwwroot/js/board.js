const trelloContainer=document.getElementById("trello-container");trelloContainer.className="",trelloContainer.classList.add(backgroundClass);const nameInput=document.getElementById("board-name-update"),nameHidden=document.getElementById("board-name-hidden");function resizeInput(){nameInput.style.width=`${12*nameInput.value.length}px`}async function updateBoardNameAsync(e,t){const a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({boardId:e,name:t})},d=await fetch("/Boards/UpdateBoardNameAsync",a);return await d.json()}async function updateBoardName(e){if(13===e.keyCode)if(nameInput.value.length){await updateBoardNameAsync(nameInput.dataset.id,nameInput.value)&&(nameHidden.value=nameInput.value,document.title=`${nameInput.value} | Trello`,nameInput.blur())}else nameInput.blur();else resizeInput()}nameInput.addEventListener("blur",()=>{nameInput.value=nameHidden.value,resizeInput()}),nameInput.addEventListener("focus",()=>nameInput.select()),nameInput.addEventListener("keyup",updateBoardName),resizeInput();const star=document.querySelector(".board-link-star > div");async function updateFavoriteAsync(e,t){const a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({boardId:e,isFavorite:t})},d=await fetch("/Boards/UpdateFavoriteAsync",a);return await d.json()}async function handleStarClick(){await updateFavoriteAsync(this.dataset.id,!this.classList.contains("board-link-star-selected"))&&this.classList.toggle("board-link-star-selected")}star.addEventListener("click",handleStarClick);const labelTitleElements=document.querySelectorAll(".label-title"),editTitleElements=document.querySelectorAll(".edit-title");async function updateListTitleAsync(e,t){const a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({listId:e,title:t})},d=await fetch("/Boards/UpdateListTitleAsync",a);return await d.json()}async function updateListTitle(e){if(13===e.keyCode){const t=e.target.value.trim();if(t){await updateListTitleAsync(e.target.dataset.id,t)&&(e.target.previousElementSibling.innerHTML=t),e.target.blur()}}}function blurListTitle(e){e.target.value=e.target.previousElementSibling.innerHTML,e.target.classList.add("hide"),e.target.previousElementSibling.classList.remove("hide"),e.target.nextElementSibling.classList.remove("hide")}function showEditTitle(e){e.target.classList.add("hide"),e.target.parentNode.querySelector(".delete-list").classList.add("hide"),e.target.nextElementSibling.classList.remove("hide"),e.target.nextElementSibling.select()}labelTitleElements.forEach(e=>e.addEventListener("click",showEditTitle)),editTitleElements.forEach(e=>e.addEventListener("mouseup",()=>e.classList.add("edit-title.focus"))),editTitleElements.forEach(e=>e.addEventListener("keyup",updateListTitle)),editTitleElements.forEach(e=>e.addEventListener("blur",blurListTitle));const deleteListButtons=document.querySelectorAll(".delete-list");async function deleteListAsync(e){const t={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({listId:e})},a=await fetch("/Boards/DeleteListAsync",t);return await a.json()}function removeListElement(e){const t=e.closest(".drop-list");t.parentNode.removeChild(t)}async function deleteList(e){await deleteListAsync(e.target.dataset.id)&&removeListElement(e.target)}deleteListButtons.forEach(e=>e.addEventListener("click",deleteList));const listsContainer=document.querySelector(".board-lists"),addListContainer=document.getElementById("add-list"),addListLink=document.getElementById("add-list-link"),addListForm=document.getElementById("add-list-form"),addListTitle=addListForm.querySelector("#add-list-title"),addListSubmit=addListForm.querySelector("#add-list-submit"),addListClose=addListForm.querySelector("#add-list-submit-container > i");function handleClickAddListLink(){addListLink.classList.add("hide"),addListForm.classList.remove("hide"),addListTitle.select()}function closeListForm(){addListTitle.value="",addListLink.classList.remove("hide"),addListForm.classList.add("hide")}async function addListAsync(e,t,a){const d={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({boardId:e,title:t,position:a})},s=await fetch("/Boards/AddListAsync",d);return await s.json()}function addListElement(e){const t=document.createElement("div");t.className="drop-list",t.dataset.id=e.listId,t.dataset.position=e.position,t.innerHTML=`<div class="board-list edit-list grab-list empty-list">\n    <div class="list-actions">\n      <span class="label-title">${e.title}</span>\n      <input type="text" class="edit-title hide" value="${e.title}" data-id="${e.listId}"> \n      <span class="fas fa-trash-alt delete-list" data-id="${e.listId}"></span>\n    </div>\n    <div class="add-card">\n        <div class="add-card-link">\n            <i class="fas fa-plus"></i>\n            <span>'Add a card</span>\n        </div>\n        <div class="add-card-form add-form hide">\n            <textarea class="add-card-title card-style" data-id="${e.listId}" rows="3" \n                placeholder="Enter a title for this card..."></textarea>\n            <div>\n                <button class="add-card-submit">Add card</button>\n                <i class="fas fa-times add-card-close"></i>\n            </div>\n        </div>\n    </div>\n  </div>`,listsContainer.insertBefore(t,addListContainer),addListEventListeners(t),closeListForm()}async function addList(){if(addListTitle.value){const e=document.querySelectorAll(".drop-list"),t=e.length?parseInt(e[e.length-1].dataset.position,10)+1:0,a=await addListAsync(addListTitle.dataset.id,addListTitle.value,t);a&&addListElement(a)}}addListLink.addEventListener("click",handleClickAddListLink),addListForm.addEventListener("blur",closeListForm),addListClose.addEventListener("click",closeListForm),addListSubmit.addEventListener("click",addList),addListTitle.addEventListener("keyup",e=>{13===e.keyCode&&addList()});const listContainer=document.querySelector(".board-lists"),grabListElements=document.querySelectorAll(".grab-list");let grabbedList,grabbedListDroppable,listDroppables,offsetXList,offsetYList;const grabList=e=>{if(grabbedList=e.target.classList.contains("grab-list")&&e.target||e.target.classList.contains("list-actions")&&e.target.parentNode||null){grabbedList.style.cursor="grabbing";const t=grabbedList.getBoundingClientRect();(grabbedListDroppable=grabbedList.parentNode).style.maxWidth=`${t.width}px`,grabbedListDroppable.style.height=`${t.height}px`,offsetXList=e.clientX-t.x,offsetYList=e.clientY-t.y,grabbedList.classList.add("grabbing"),grabbedList.style.width=`${t.width}px`,grabbedList.style.height=`${t.height}px`,grabbedList.style.left=`${e.clientX-offsetXList}px`,grabbedList.style.top=`${e.clientY-offsetYList}px`,listContainer.append(grabbedList),listDroppables=document.querySelectorAll(".drop-list")}},getIntersectionArea=(e,t)=>Math.max(0,Math.min(e.right,t.right)-Math.max(e.left,t.left))*Math.max(0,Math.min(e.bottom,t.bottom)-Math.max(e.top,t.top)),getIntersections=(e,t)=>{const a=[];return t.forEach(t=>{const d=t.getBoundingClientRect();a.push({element:t,rect:d,area:getIntersectionArea(e,d)})}),a},moveList=e=>{if(grabbedList){grabbedList.style.left=`${e.clientX-offsetXList}px`,grabbedList.style.top=`${e.clientY-offsetYList}px`;const t=getIntersections(grabbedList.getBoundingClientRect(),listDroppables).reduce((e,t)=>e.area>t.area?e:t);t.area&&t.element!==grabbedListDroppable&&(grabbedListDroppable.dataset.position>t.element.dataset.position?listContainer.insertBefore(grabbedListDroppable,t.element):listContainer.insertBefore(grabbedListDroppable,t.element.nextSibling),document.querySelectorAll(".drop-list").forEach((e,t)=>{e.dataset.position=t}))}};async function updateListPositionAsync(e,t){const a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({listId:e,position:t})},d=await fetch("/Boards/UpdateListPositionAsync",a);return await d.json()}const dropList=e=>{e.preventDefault(),grabbedList&&(grabbedList.classList.remove("grabbing"),grabbedListDroppable.append(grabbedList),listDroppables.forEach(e=>updateListPositionAsync(e.dataset.id,e.dataset.position)),grabbedList.removeAttribute("style"),grabbedListDroppable.removeAttribute("style"),grabbedList=null)};grabListElements.forEach(e=>e.addEventListener("mousedown",grabList)),document.addEventListener("mousemove",moveList),document.addEventListener("mouseup",dropList);const addCardLinkElements=document.querySelectorAll(".add-card-link"),closeAddCardElements=document.querySelectorAll(".add-card-close"),addCardSubmitElements=document.querySelectorAll(".add-card-submit");function handleClickAddCard(e){e.currentTarget.classList.add("hide"),e.currentTarget.nextElementSibling.classList.remove("hide"),e.currentTarget.nextElementSibling.querySelector("textarea").select()}function closeCardForm(e){e.querySelector("textarea").value="",e.classList.add("hide"),e.previousElementSibling.classList.remove("hide")}function handleClickCloseCardForm(e){closeCardForm(e.currentTarget.closest(".add-card-form"))}async function addCardAsync(e,t,a){const d={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({listId:e,title:t,position:a})},s=await fetch("/Boards/AddCardAsync",d);return await s.json()}const addCardElement=(e,t)=>{const a=document.createElement("div");a.className="drop-card",a.dataset.id=t.cardId,a.dataset.position=t.position,a.innerHTML=`<div class="card card-style grab-card">\n      <span class="label-title-card">${t.title}</span>\n      <span class="fas fa-pencil-alt edit-card-icon action-card" data-id="${t.cardId}"></span>\n      <span class="fas fa-trash-alt delete-card-icon action-card" data-id="${t.cardId}"></span>\n    </div>\n    <div class="edit-card hide">\n      <input placeholder="Edit card title..." value="${t.title}" data-id="${t.cardId}" />\n    </div>`;const d=e.closest(".add-card-form"),s=d.parentNode;s.parentNode.insertBefore(a,s),addCardEventListeners(a),closeCardForm(d)};async function handleClickSubmitCard(e){const t=e.target.parentNode.previousElementSibling;if(t.value){const a=e.target.closest(".board-list").querySelectorAll(".drop-card");let d=0;a.length&&(d=parseInt(a[a.length-1].dataset.position,10)+1);const s=await addCardAsync(t.dataset.id,t.value,d);s&&addCardElement(e.target,s)}}addCardLinkElements.forEach(e=>e.addEventListener("click",handleClickAddCard)),closeAddCardElements.forEach(e=>e.addEventListener("click",handleClickCloseCardForm)),addCardSubmitElements.forEach(e=>e.addEventListener("click",handleClickSubmitCard));const grabCardElements=document.querySelectorAll(".grab-card");let grabbedCard,grabbedCardDroppable,cardDroppables,offsetXCard,offsetYCard;const grabCard=e=>{if(grabbedCard=e.target.classList.contains("grab-card")&&e.target||e.target.closest(".grab-card")||null){grabbedCard.style.cursor="grabbing";const t=grabbedCard.getBoundingClientRect();(grabbedCardDroppable=grabbedCard.parentNode).style.width=`${t.width}px`,grabbedCardDroppable.style.height=`${t.height}px`,offsetXCard=e.clientX-t.x,offsetYCard=e.clientY-t.y,grabbedCard.classList.add("grabbing"),grabbedCard.style.width=`${t.width}px`,grabbedCard.style.height=`${t.height}px`,grabbedCard.style.left=`${e.clientX-offsetXCard}px`,grabbedCard.style.top=`${e.clientY-offsetYCard}px`}listContainer.append(grabbedCard),cardDroppables=document.querySelectorAll(".drop-card, .empty-list")},moveCard=e=>{if(grabbedCard){grabbedCard.style.left=`${e.clientX-offsetXCard}px`,grabbedCard.style.top=`${e.clientY-offsetYCard}px`;const t=getIntersections(grabbedCard.getBoundingClientRect(),cardDroppables).reduce((e,t)=>e.area>t.area?e:t);if(t.area&&t.element!==grabbedCardDroppable){const e=grabbedCardDroppable.parentNode;if(t.element.classList.contains("empty-list")){const e=t.element.querySelector(".add-card");t.element.insertBefore(grabbedCardDroppable,e),t.element.classList.remove("empty-list"),cardDroppables=document.querySelectorAll(".drop-card, .empty-list")}else{const e=t.element.parentNode;grabbedCardDroppable.dataset.position>t.element.dataset.position?e.insertBefore(grabbedCardDroppable,t.element):e.insertBefore(grabbedCardDroppable,t.element.nextSibling)}e.querySelector(".drop-card")||(e.classList.add("empty-list"),cardDroppables=document.querySelectorAll(".drop-card, .empty-list")),document.querySelectorAll(".drop-card").forEach((e,t)=>{e.dataset.position=t})}}};async function UpdateCardPositionAsync(e,t,a){const d={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({listId:e,cardId:t,position:a})},s=await fetch("/Boards/UpdateCardPositionAsync",d);return await s.json()}const dropCard=()=>{grabbedCard&&(grabbedCard.classList.remove("grabbing"),grabbedCardDroppable.append(grabbedCard),(cardDroppables=document.querySelectorAll(".drop-card")).forEach(e=>UpdateCardPositionAsync(e.closest(".drop-list").dataset.id,e.dataset.id,e.dataset.position)),grabbedCard.removeAttribute("style"),grabbedCardDroppable.removeAttribute("style"),grabbedCard=null)};grabCardElements.forEach(e=>e.addEventListener("mousedown",grabCard)),document.addEventListener("mousemove",moveCard),document.addEventListener("mouseup",dropCard);const deleteCardElements=document.querySelectorAll(".delete-card-icon");async function deleteCardAsync(e){const t={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cardId:e})},a=await fetch("/Boards/DeleteCardAsync",t);return await a.json()}function removeCardElement(e){const t=e.closest(".drop-card");t.parentNode.removeChild(t)}async function deleteCard(e){await deleteCardAsync(e.target.dataset.id)&&removeCardElement(e.target)}function handleMousedownDeleteCard(e){e.stopPropagation()}deleteCardElements.forEach(e=>{e.addEventListener("mousedown",handleMousedownDeleteCard),e.addEventListener("click",deleteCard)});const editCardElements=document.querySelectorAll(".edit-card-icon"),editCardInputs=document.querySelectorAll(".edit-card > input");function showEditCard(e){e.target.closest(".grab-card").classList.add("hide");const t=e.target.closest(".drop-card").querySelector(".edit-card");t.classList.remove("hide"),t.querySelector("input").select()}function hideEditCard(e){const t=e.target.closest(".drop-card");t.querySelector(".edit-card").classList.add("hide"),t.querySelector("input").value=t.querySelector(".label-title-card").textContent,t.querySelector(".grab-card").classList.remove("hide")}function handleMousedownEditCard(e){e.stopPropagation()}async function updateCardTitleAsync(e,t){const a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cardId:e,title:t})},d=await fetch("/Boards/UpdateCardTitleAsync",a);return await d.json()}async function updateCardTitle(e){if(13===e.keyCode){const t=e.target.value.trim();if(t){if(await updateCardTitleAsync(e.target.dataset.id,t)){e.target.closest(".drop-card").querySelector(".label-title-card").textContent=t}e.target.blur()}}}function addListEventListeners(e){e.querySelector(".grab-list").addEventListener("mousedown",grabList),e.querySelector(".label-title").addEventListener("click",showEditTitle);const t=e.querySelector(".edit-title");t.addEventListener("keyup",updateListTitle),t.addEventListener("blur",blurListTitle),e.querySelector(".delete-list").addEventListener("click",deleteList),e.querySelector(".add-card-link").addEventListener("click",handleClickAddCard),e.querySelector(".add-card-close").addEventListener("click",handleClickCloseCardForm),e.querySelector(".add-card-submit").addEventListener("click",handleClickSubmitCard)}function addCardEventListeners(e){e.addEventListener("mousedown",grabCard);const t=e.querySelector(".delete-card-icon");t.addEventListener("mousedown",handleMousedownDeleteCard),t.addEventListener("click",deleteCard);const a=e.querySelector(".edit-card-icon");a.addEventListener("mousedown",handleMousedownEditCard),a.addEventListener("click",showEditCard);const d=e.querySelector("input");d.addEventListener("blur",hideEditCard),d.addEventListener("mousedown",handleMousedownEditCard),d.addEventListener("keyup",updateCardTitle)}editCardElements.forEach(e=>{e.addEventListener("mousedown",handleMousedownEditCard),e.addEventListener("click",showEditCard)}),editCardInputs.forEach(e=>{e.addEventListener("blur",hideEditCard),e.addEventListener("mousedown",handleMousedownEditCard),e.addEventListener("keyup",updateCardTitle)});